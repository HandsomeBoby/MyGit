struct ListNode 
{
	int val;
	struct ListNode *next;

	ListNode(int x) 
		:val(x)
		, next(NULL) 
	{}
};


class Solution 
{

public:
	
	//非递归
	ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
	{
		if (pHead1 == NULL&&pHead2 == NULL)
		{
			return NULL;
		}
		//如果pHead1为空，不需要合并，返回pHead2
		if (pHead1 == NULL)
		{
			return pHead2;
		}
		if (pHead2 == NULL)
		{
			return pHead1;
		}

		ListNode * pHead = NULL;
		ListNode * cur = NULL;
		//新链表的头节点
		if (pHead1->val <= pHead2->val)
		{
			pHead = pHead1;
			cur = pHead1;
			pHead1 = pHead1->next;
		}
		else
		{
			pHead = pHead2;
			cur = pHead2;
			pHead2 = pHead2->next;
		}

		while (pHead1 != NULL && pHead2 != NULL)
		{
			if (pHead1->val <= pHead2->val)
			{

				cur->next = pHead1;
				cur = cur->next;
				pHead1 = pHead1->next;
			}
			else
			{
				cur->next = pHead2;
				cur = cur->next;
				pHead2 = pHead2->next;
			}
		}

		if (pHead1 == NULL)
		{
			cur->next = pHead2;
		}
		else
		{
			cur->next = pHead1;
		}

		return pHead;
	}


	//递归
	ListNode Merge2(ListNode list1, ListNode list2)
	{

		if (list1 == NULL)
			return list2;
		else if (list2 == NULL)
			return list1;
		ListNode mergeHead = NULL;
		if (list1.val<list2.val) {
			mergeHead = list1;
			mergeHead.next = Merge(list1->next, list2);
		}
		else
		{
			mergeHead = list2;
			mergeHead.next = Merge(list1, list2->next);
		}
		return mergeHead;

	}
};
